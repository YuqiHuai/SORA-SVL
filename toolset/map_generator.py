# SPDX-FileCopyrightText: (c) 2024 Yuqi Huai.
# SPDX-License-Identifier: BSD-3-Clause
# Modifications Copyright (c) 2025 Xronos Inc.

# Generate Map Configuration from JSON
import json
import os
import zipfile
import shutil
from tempfile import TemporaryDirectory
from datetime import datetime
from PIL import Image
import argparse
from db_utils import WiseDB


class MapGenerator(object):

    def __init__(self):
        self.db = WiseDB()

    def add_map_to_sora_server(self, bundle_file, asset_dir='../server/assets'):
        """
        :param bundle_file: map bundle file, generated by Simulator Unity.
        :param asset_dir: sora server asset dir, default='server/assets'
        :return: None
        """

        # unzip bundle file and get the map info
        tempdir = TemporaryDirectory().name
        with zipfile.ZipFile(bundle_file) as zf:
            zf.extractall(tempdir)
            with zf.open('manifest.json') as f:
                manifest_dict = json.load(f)

        with open(os.path.join(tempdir, 'manifest.json'), 'r') as f:
            manifest_dict = json.load(f)

        asset_guid = manifest_dict['assetGuid']
        asset_name = manifest_dict['assetName']

        # deal with maps
        shutil.copyfile(bundle_file, os.path.join(asset_dir, 'maps', asset_guid))
        print('Info: add map bundle file to {}'.format(os.path.join(asset_dir, 'maps', asset_guid)))

        # deal with hdmaps
        src_list = [
            os.path.join(tempdir, 'hdmaps/apollo50/base_map.bin'),
            os.path.join(tempdir, 'hdmaps/autoware/AutowareVectorMap.zip'),
            os.path.join(tempdir, 'hdmaps/lanelet2/{}.osm'.format(asset_name)),
            os.path.join(tempdir, 'hdmaps/opendrive/{}.xodr'.format(asset_name))
        ]
        dst_list = [
            os.path.join(asset_dir, 'hdmaps', asset_guid, 'base_map.bin'),
            os.path.join(asset_dir, 'hdmaps', asset_guid, 'AutowareVectorMap.zip'),
            os.path.join(asset_dir, 'hdmaps', asset_guid, asset_name + '.osm'),
            os.path.join(asset_dir, 'hdmaps', asset_guid, asset_name + '.xodr')
        ]

        if not os.path.exists(os.path.join(asset_dir, 'hdmaps', asset_guid)):
            os.mkdir(os.path.join(asset_dir, 'hdmaps', asset_guid))

        for i in range(len(src_list)):
            if os.path.exists(src_list[i]):
                shutil.copyfile(src_list[i], dst_list[i])
            else:
                # just fork a file for the non-existing lanelet2 or opendirve file.
                shutil.copyfile(src_list[0], dst_list[i])
        print('Info: add hdmap file to {}'.format(dst_list[0]))

        # deal with preview
        src = os.path.join(tempdir, 'images', 'preview-1.png')
        dst = os.path.join(asset_dir, 'preview', 'maps', asset_guid)
        if not os.path.exists(dst):
            os.mkdir(dst)

        im = Image.open(src)
        im_large = im.resize((1280, 720))
        im_large2x = im.resize((2560, 1440))
        im_medium = im.resize((640, 360))
        im_medium2x = im.resize((1280, 720))
        im_small = im.resize((320, 180))
        im_small2x = im.resize((640, 360))
        im_large.save(os.path.join(dst, 'large.webp'), format="WebP", lossless=True)
        im_large2x.save(os.path.join(dst, 'large2x.webp'), format="WebP", lossless=True)
        im_medium.save(os.path.join(dst, 'medium.webp'), format="WebP", lossless=True)
        im_medium2x.save(os.path.join(dst, 'medium2x.webp'), format="WebP", lossless=True)
        im_small.save(os.path.join(dst, 'small.webp'), format="WebP", lossless=True)
        im_small2x.save(os.path.join(dst, 'small2x.webp'), format="WebP", lossless=True)
        print('Info: add preview images to {}'.format(dst))

        # deal with the map.json to insert into mongodb
        map_config = self.generate_map_config(manifest_dict)

        # save to json file
        # debug begin
        with open('map_config_name_{}_guid{}.json'.format(asset_name, asset_guid), 'w') as f:
            json.dump(map_config, f, indent=4)
        # debug end

        # add map config into mongodb.
        self.insert_into_map_db(map_config)
        self.insert_into_global_db(map_config)
        self.insert_into_hdmaps_db(map_config)

    def generate_map_config(self, manifest_dict):
        attributes = ['assetGuid', 'isShared', 'isFavored', 'isOwned', 'accessInfo', 'geoJsonUrl',
                      'supportedSimulatorVersions', 'id', 'name', 'description', 'copyright',
                      'licenseName', 'ownerId', 'accessType', 'imageUrl', 'hdmaps', 'status', 'tags', 'owner',
                      'shareRequests', 'favoredBy', 'sharedWith']

        config_template = dict()
        config_template['assetGuid'] = manifest_dict['assetGuid']
        config_template['isShared'] = False
        config_template['isFavored'] = True
        config_template['isOwned'] = True
        config_template['accessInfo'] = {"userAccessType": "own"}
        config_template['geoJsonUrl'] = "/api/v1/assets/download/geojson/{}".format(manifest_dict['assetGuid'])
        config_template['supportedSimulatorVersions'] = ["2021.3", "!x-debug-map", "Development"]
        config_template['id'] = self.db.generate_id_for_map()
        config_template['name'] = manifest_dict['assetName']
        config_template['description'] = manifest_dict['description']
        config_template['copyright'] = 'San Zhang'
        config_template['licenseName'] = "User Content"
        config_template['ownerId'] = "7e820960-edea-4d23-882d-421af35e7286"
        config_template['accessType'] = "public"
        config_template['imageUrl'] = "/api/v1/assets/download/preview/{}".format(manifest_dict['assetGuid'])
        config_template['hdmaps'] = "apollo50,autoware,lanelet2,opendrive"
        config_template['status'] = "active"
        config_template['tags'] = [{"name": "mybuildmap", "meta": {"sortKey": 0}}]
        config_template['owner'] = {"id": config_template['ownerId'], "firstName": "San", "lastName": "Zhang"}
        config_template['shareRequests'] = []
        config_template['favoredBy'] = [config_template['owner']]
        config_template['sharedWith'] = []

        # return the dict
        return config_template

    def insert_into_map_db(self, map_config):
        attributes = ['cid', 'name', 'endpoint', 'data']

        config_template = dict()
        config_template['cid'] = map_config['id']
        config_template['name'] = map_config['name']
        config_template['endpoint'] = '/api/v1/maps/{}'.format(map_config['id'])
        config_template['data'] = map_config

        # debug begin
        with open("db_maps_name{}_cid{}.json".format(map_config['name'], map_config['id']), 'w') as f:
            json.dump(config_template, f, indent=4)
        # debug end

        # insert into 'maps' db
        self.db.get_collection('maps').insert_one(config_template)
        print('Info: insert into maps db: {}, {}.'.format(map_config['name'], map_config['id']))

    def insert_into_hdmaps_db(self, map_config):
        attributes = ['assetGuid', 'apollo50', 'autoware', 'lanelet2', 'opendrive']

        config_template = dict()
        config_template['assetGuid'] = map_config['assetGuid']
        config_template['apollo50'] = 'base_map.bin'
        config_template['autoware'] = 'AutowareVectorMap.zip'
        config_template['lanelet2'] = '{}.osm'.format(map_config['name'])
        config_template['opendrive'] = '{}.xodr'.format(map_config['name'])

        # debug begin
        with open("db_hdmaps_name{}_cid{}.json".format(map_config['name'], map_config['id']), 'w') as f:
            json.dump(config_template, f, indent=4)
        # debug end

        self.db.get_collection('hd_maps').insert_one(config_template)
        print('Info: insert into hd_maps db: {}, {}.'.format(map_config['name'], map_config['id']))
        # debug begin
        result = self.db.get_collection('hd_maps').find({'assetGuid': map_config['assetGuid']})
        for x in result:
            print(x)
        # debug end

    def insert_into_global_db(self, map_config):
        attributes = ['isShared', 'isFavored', 'isOwned', 'accessInfo', 'supportedSimulatorVersions', 'id',
                      'name', 'description', 'copyright',
                      'licenseName', 'ownerId', 'accessType', 'imageUrl', 'hdmaps', 'status', 'owner', 'shareRequests']

        config_template = dict()
        for k in attributes:
            if k == 'shareRequests':
                config_template[k] = ""
            else:
                config_template[k] = map_config[k]

        # insert the map config
        result = self.db.get_collection('global').update_one({'type': 'maps'},
                                                             {"$push": {"data.rows": config_template}})

        # find the number of maps in the global database
        count_json = self.db.get_collection('global').aggregate(
            [{'$match': {'type': 'maps'}}, {'$unwind': '$data.rows'}, {'$count': 'count'}])
        for x in count_json:
            print(x)
            new_count = x['count']
            # set the map count to 'count' field.
            self.db.get_collection('global').update_one({'type': 'maps'}, {"$set": {"data.count": new_count}})
        # check if the count is correct
        result = self.db.get_collection('global').aggregate(
            [{'$match': {'type': 'maps'}}, {'$project': {'data.count': 1}}])
        for x in result:
            print(x)

        # self.db.get_collection('global').aggregate([{'$match':{'type':'maps'}},{'$unwind':'$data.rows'},{'$match':{'data.rows.name': 'MyNewMap'}}])

    def insert_map_to_db(self, map_json_file):
        with open(map_json_file, 'r') as f:
            map_config = json.load(f)

        self.insert_into_map_db(map_config)
        self.insert_into_hdmaps_db(map_config)
        self.insert_into_global_db(map_config)


def test_add_map_from_config_file():
    """
    When you already have the map config file, use this function.
    The map_config_file can be downloaded from original wise.svlsimulator.com.
    :return:
    """
    map_generator = MapGenerator()
    map_config_file = '/mongo/setup/download/maps_MyNewMap_f0af040b-6f39-4440-a656-fe82708cd2db.json'
    map_generator.insert_map_to_db(map_config_file)


def test_add_map_from_bundle_file():
    """
    When you have only the bundle file, use this function.
    :return:
    """
    map_generator = MapGenerator()
    bundle_file = 'environment_Ceshi'
    map_generator.add_map_to_sora_server(bundle_file)


if __name__ == '__main__':
    test_add_map_from_bundle_file()
    # test_add_map_from_config_file()

